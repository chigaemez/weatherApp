import { DateTime } from 'luxon'

const API_KEY = "1f309ebc0841442a8ec55254232212"
const BASE_URL = "http://api.weatherapi.com/v1/forecast.json?key=1f309ebc0841442a8ec55254232212&q=London&days=5&aqi=yes&alerts=yes"



//https://api.openweathermap.org/data/2.5/onecall?lat=48.8534&%20Lon=2.3488&exclude=current,%20minutely,%20alerts&appid=be10fb8dc1a1b2e43cc2f4aa34a07912&units-metric

const getWeatherData = (infoType, searchParams) => {
    const url = new URL(BASE_URL + "/" + infoType)
    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY })

    


    return fetch(url).then(res => {
        console.log(res.json())
    }).then((data) => data)
}


const fomatCurrentWeather = (data) => {
    const {
        coord: { lat, lon },
        main: { temp, feels_like, temp_min, temp_max, humidity, },
        name,
        dt,
        sys: { country, sunrise, sunset },
        weather,
        wind: { speed }
    } = data

    const { main: details, icon } = weather[0]

    return { lat, lon, temp, feels_like, temp_min, temp_max, humidity, name, dt, country, sunrise, sunset, details, icon, speed }
}

const formatForcastWeather = (data) => {
    let { timezone, daily, hourly } = data;

    console.log(daily)

    daily = daily.slice(1, 6).map(d => {
        return{
            title: formatToLocalTime(d.dt, timezone, 'ccc'),
            temp: d.temp.day,
            icon: d.weather[0].icon
        }
    })
   
         

    hourly = hourly.slice(1, 6).map(d => {
        return{
            title: formatToLocalTime(d.dt, timezone, 'hh:mm a'),
            temp: d.temp.day,
            icon: d.weather[0].icon
        }
    })

  


    return {timezone, daily, hourly}

}



const getFormattedWeatherData = async (searchParams) => {
    const formattedCurrentWeather = await getWeatherData("weather", searchParams).then(fomatCurrentWeather)

    const { lat, lon } = formattedCurrentWeather

    const formattedForcastWeather = await getWeatherData("onecall", {
        lat, lon, exclude: "current,minutely,alerts", units: searchParams.units,
    }).then(formatForcastWeather)



    return {...formattedCurrentWeather, ...formattedForcastWeather}
}

const formatToLocalTime = (secs, zone, format = "cccc, dd LLL yyyy' | Local time: 'hh:mm a") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);


const iconUrlFromCode = (code) => {
    `http://openweathermap.org/img/wn/${code}@2x.png`
}

export {formatToLocalTime, iconUrlFromCode}

export default getFormattedWeatherData